# Generated by Django 3.2 on 2021-05-05 18:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Password',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Title')),
                ('description', models.CharField(blank=True, max_length=500, null=True, verbose_name='Description')),
                ('code', models.CharField(max_length=36, unique=True, verbose_name='Password_code')),
                ('signature', models.BinaryField(max_length=40, verbose_name='Password_signature')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated_at')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='password_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created_by')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_owner', to=settings.AUTH_USER_MODEL, verbose_name='Password_owner')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='password_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated_by')),
            ],
        ),
        migrations.CreateModel(
            name='UserPasswordAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(default=True, verbose_name='Can_read')),
                ('share', models.BooleanField(default=False, verbose_name='Can_share')),
                ('update', models.BooleanField(default=False, verbose_name='Can_update')),
                ('owner', models.BooleanField(default=False, verbose_name='Is_owner')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated_at')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userpasswordassignment_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created_by')),
                ('password', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.password', verbose_name='Password')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='userpasswordassignment_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated_by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'unique_together': {('user', 'password')},
            },
        ),
        migrations.AddIndex(
            model_name='password',
            index=models.Index(fields=['title'], name='title_idx'),
        ),
        # Database integrity validation triggers
        migrations.RunSQL("""
CREATE TRIGGER main_password_tr_upd BEFORE UPDATE ON main_password
FOR EACH ROW
BEGIN
	IF EXISTS (SELECT 1 FROM main_userpasswordassignment WHERE main_userpasswordassignment.user_id = NEW.owner_id) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Duplicate for assignment to password. Password main owner cannot be assigned to the password again';
	END IF;
END
        """, 
        reverse_sql="""
DROP TRIGGER main_password_tr_upd
        """),
        migrations.RunSQL("""
CREATE TRIGGER main_userpasswordassignment_tr_ins BEFORE INSERT ON main_userpasswordassignment
FOR EACH ROW
BEGIN
	IF EXISTS (SELECT 1 FROM main_password WHERE main_password.owner_id = NEW.user_id) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Duplicate for assignment to password. Password main owner cannot be assigned to the password again';
	END IF;
END
        """,
        reverse_sql="""
DROP TRIGGER main_userpasswordassignment_tr_ins
        """),
        migrations.RunSQL("""
CREATE TRIGGER main_userpasswordassignment_tr_upd BEFORE UPDATE ON main_userpasswordassignment
FOR EACH ROW
BEGIN
	IF EXISTS (SELECT 1 FROM main_password WHERE main_password.owner_id = NEW.user_id) THEN
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'Duplicate for assignment to password. Password main owner cannot be assigned to the password again';
	END IF;
END
        """,
        reverse_sql="""
DROP TRIGGER main_userpasswordassignment_tr_upd
        """)
    ]
